
# https://docs.cenm.r3.com/pki-tool.html#certificate-templates
# defaultPassword = "password"
hsmLibraries = [{
    type = AZURE_KEY_VAULT_HSM
    jars = ["/opt/cenm/HSM/azure-keyvault-with-deps.jar"]
}]

keyStores = {
    "identity-manager-key-store" = {
        type = AZURE_KEY_VAULT_HSM
        keyVaultUrl = "{{ .Values.pki.keyStores.keyVaultUrl }}"
        protection = "SOFTWARE"
        credentials = {
            keyStorePath = "/opt/cenm/HSM/out.pkcs12"
            keyStorePassword = "{{ .Values.pki.keyStores.credentials.keyStorePassword }}"
            keyStoreAlias = "{{ .Values.pki.keyStores.credentials.keyStoreAlias }}"
            clientId = "{{ .Values.pki.keyStores.credentials.clientId }}"
        }
    }
    "network-map-key-store" = {
        type = AZURE_KEY_VAULT_HSM
        keyVaultUrl = "{{ .Values.pki.keyStores.keyVaultUrl }}"
        protection = "SOFTWARE"
        credentials = {
            keyStorePath = "/opt/cenm/HSM/out.pkcs12"
            keyStorePassword = "{{ .Values.pki.keyStores.credentials.keyStorePassword }}"
            keyStoreAlias = "{{ .Values.pki.keyStores.credentials.keyStoreAlias }}"
            clientId = "{{ .Values.pki.keyStores.credentials.clientId }}"
        }
    }
    "subordinate-key-store" = {
        type = AZURE_KEY_VAULT_HSM
        keyVaultUrl = "{{ .Values.pki.keyStores.keyVaultUrl }}"
        protection = "SOFTWARE"
        credentials = {
            keyStorePath = "/opt/cenm/HSM/out.pkcs12"
            keyStorePassword = "{{ .Values.pki.keyStores.credentials.keyStorePassword }}"
            keyStoreAlias = "{{ .Values.pki.keyStores.credentials.keyStoreAlias }}"
            clientId = "{{ .Values.pki.keyStores.credentials.clientId }}"
        }
    }
    "root-key-store" = {
        type = AZURE_KEY_VAULT_HSM
        keyVaultUrl = "{{ .Values.pki.keyStores.keyVaultUrl }}"
        protection = "SOFTWARE"
        credentials = {
            keyStorePath = "/opt/cenm/HSM/out.pkcs12"
            keyStorePassword = "{{ .Values.pki.keyStores.credentials.keyStorePassword }}"
            keyStoreAlias = "{{ .Values.pki.keyStores.credentials.keyStoreAlias }}"
            clientId = "{{ .Values.pki.keyStores.credentials.clientId }}"
        }
    }
    "tls-crl-signer-key-store" = {
        type = AZURE_KEY_VAULT_HSM
        keyVaultUrl = "{{ .Values.pki.keyStores.keyVaultUrl }}"
        protection = "SOFTWARE"
        credentials = {
            keyStorePath = "/opt/cenm/HSM/out.pkcs12"
            keyStorePassword = "{{ .Values.pki.keyStores.credentials.keyStorePassword }}"
            keyStoreAlias = "{{ .Values.pki.keyStores.credentials.keyStoreAlias }}"
            clientId = "{{ .Values.pki.keyStores.credentials.clientId }}"
        }
    }
    "corda-ssl-network-map-keys" = {
        type = LOCAL
        file = "./DATA/key-stores/corda-ssl-network-map-keys.jks"
        password = "password"
    },
    "corda-ssl-identity-manager-keys" = {
        type = LOCAL
        file = "./DATA/key-stores/corda-ssl-identity-manager-keys.jks"
        password = "password"
    },
    "corda-ssl-signer-keys" = {
        type = LOCAL
        file = "./DATA/key-stores/corda-ssl-signer-keys.jks"
        password = "password"
    },
    "corda-ssl-auth-keys" = {
        type = LOCAL
        file = "./DATA/key-stores/corda-ssl-auth-keys.jks"
        password = "password"
    },
    "corda-ssl-root-keys" = {
        type = LOCAL
        file = "./DATA/key-stores/corda-ssl-root-keys.jks"
        password = "password"
    }
}

certificatesStores = {
    "network-root-trust-store" = {
        file = "./DATA/trust-stores/network-root-truststore.jks"
        password = "trust-store-password"
    }
    "certificate-store" = {
        file = "./DATA/trust-stores/certificate-store.jks"
        password = "trust-store-password"
    }
    "corda-ssl-trust-store" = {
        file = "./DATA/trust-stores/corda-ssl-trust-store.jks"
        password = "trust-store-password"
    }
}

certificates = {
    "tlscrlsigner" = {
        key = {
            type = AZURE_KEY_VAULT_HSM
            includeIn = ["tls-crl-signer-key-store"]
        }
        isSelfSigned = true
        keyUsages = [CRL_SIGN]
        keyPurposes = [SERVER_AUTH, CLIENT_AUTH]
        validDays = 7300
        issuesCertificates = true
        subject = {{ .Values.pki.certificates.tlscrlsigner.subject | quote }}
        includeIn = ["network-root-trust-store"]
        crl = {
            crlDistributionUrl = "http://{{ required "Public IP address required (add --set idmanPublicIP=x.x.x.x to your helm command)" .Values.idmanPublicIP }}:{{ .Values.idmanPort }}/certificate-revocation-list/tls"
            indirectIssuer = true
            issuer = {{ .Values.pki.certificates.tlscrlsigner.crl.issuer | quote }}
            file = "./DATA/crl-files/tls.crl"
        }
    },
    "cordarootca" = {
        key = {
            type = AZURE_KEY_VAULT_HSM
            includeIn = ["root-key-store"]
        }
        isSelfSigned = true
        keyUsages = [DIGITAL_SIGNATURE, KEY_CERT_SIGN, CRL_SIGN]
        keyPurposes = [SERVER_AUTH, CLIENT_AUTH]
        validDays = 7300
        issuesCertificates = true
        subject = {{ .Values.pki.certificates.cordarootca.subject | quote }}
        includeIn = ["network-root-trust-store", "certificate-store"]
        crl = {
            crlDistributionUrl = "http://{{ required "Public IP address required (add --set idmanPublicIP=x.x.x.x to your helm command)" .Values.idmanPublicIP }}:{{ .Values.idmanPort }}/certificate-revocation-list/root"
            file = "./DATA/crl-files/root.crl"
        }
    },
    "subordinateca" = {
        key = {
            type = AZURE_KEY_VAULT_HSM
            includeIn = ["subordinate-key-store"]
        }
        isSelfSigned = false
        signedBy = "cordarootca"
        keyUsages = [DIGITAL_SIGNATURE, KEY_CERT_SIGN, CRL_SIGN]
        keyPurposes = [SERVER_AUTH, CLIENT_AUTH]
        validDays = 7300
        issuesCertificates = true
        subject = {{ .Values.pki.certificates.subordinateca.subject | quote }}
        crl = {
            crlDistributionUrl = "http://{{ required "Public IP address required (add --set idmanPublicIP=x.x.x.x to your helm command)" .Values.idmanPublicIP }}:{{ .Values.idmanPort }}/certificate-revocation-list/subordinate"
            file = "./DATA/crl-files/subordinate.crl"
        }
        includeIn = ["certificate-store"]
    },
    "identitymanagerca" = {
        key = {
            type = AZURE_KEY_VAULT_HSM
            includeIn = ["identity-manager-key-store"]
        }
        isSelfSigned = false
        signedBy = "subordinateca"
        keyUsages = [DIGITAL_SIGNATURE, KEY_CERT_SIGN, CRL_SIGN]
        keyPurposes = [SERVER_AUTH, CLIENT_AUTH]
        validDays = 7300
        role = DOORMAN_CA
        issuesCertificates = true
        subject = {{ .Values.pki.certificates.identitymanagerca.subject | quote }}
        includeIn = ["certificate-store"]
    },
    "networkmap" = {
        key = {
            type = AZURE_KEY_VAULT_HSM
            includeIn = ["network-map-key-store"]
        }
        isSelfSigned = false
        signedBy = "subordinateca"
        keyUsages = [DIGITAL_SIGNATURE, KEY_CERT_SIGN, CRL_SIGN]
        keyPurposes = [SERVER_AUTH, CLIENT_AUTH]
        validDays = 7300
        role = NETWORK_MAP
        issuesCertificates = false
        subject = {{ .Values.pki.certificates.networkmap.subject | quote }}
        includeIn = ["certificate-store"]
    },
    "::CORDA_SSL_ROOT" {
            key = {
                type = LOCAL
                includeIn = ["corda-ssl-identity-manager-keys"]
                algorithm = "ECDSA_SECP256R1_SHA256"
                password = "password"
            }
            crl = {
                crlDistributionUrl = "http://{{ required "Public IP address required (add --set idmanPublicIP=x.x.x.x to your helm command)" .Values.idmanPublicIP }}:{{ .Values.idmanPort }}/certificate-revocation-list/ssl"
                file = "./DATA/crl-files/ssl.crl"
            }
        },
    "::CORDA_SSL_IDENTITY_MANAGER",
    "::CORDA_SSL_NETWORK_MAP",
    "::CORDA_SSL_SIGNER",
    "::CORDA_SSL_AUTH_SERVICE"
}
